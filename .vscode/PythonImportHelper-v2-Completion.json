[
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "django.http",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.http",
        "description": "django.http",
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "RedirectView",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "calendar",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "calendar",
        "description": "calendar",
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "Tarot.models",
        "description": "Tarot.models",
        "isExtraImport": true,
        "detail": "Tarot.models",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Tarot.migrations.0001_initial",
        "description": "Tarot.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "Tarot.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Tarot.migrations.0002_alter_user_birth_date",
        "description": "Tarot.migrations.0002_alter_user_birth_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Tarot', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='birth_date',\n            field=models.CharField(max_length=255, null=True),\n        ),",
        "detail": "Tarot.migrations.0002_alter_user_birth_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Tarot.migrations.0003_alter_user_birth_date",
        "description": "Tarot.migrations.0003_alter_user_birth_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Tarot', '0002_alter_user_birth_date'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='birth_date',\n            field=models.CharField(max_length=50, null=True),\n        ),",
        "detail": "Tarot.migrations.0003_alter_user_birth_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Tarot.migrations.0004_alter_user_birth_date",
        "description": "Tarot.migrations.0004_alter_user_birth_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Tarot', '0003_alter_user_birth_date'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='birth_date',\n            field=models.DateField(null=True),\n        ),",
        "detail": "Tarot.migrations.0004_alter_user_birth_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Tarot.migrations.0005_alter_user_avatar",
        "description": "Tarot.migrations.0005_alter_user_avatar",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Tarot', '0004_alter_user_birth_date'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='avatar',\n            field=models.ImageField(blank=True, default='static/img/avatars/default_avatar.jpg', null=True, upload_to='static/avatars/'),\n        ),",
        "detail": "Tarot.migrations.0005_alter_user_avatar",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Tarot.migrations.0006_user_istarot",
        "description": "Tarot.migrations.0006_user_istarot",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Tarot', '0005_alter_user_avatar'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='istarot',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "Tarot.migrations.0006_user_istarot",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Tarot.migrations.0007_rename_start_vote_user_star_vote",
        "description": "Tarot.migrations.0007_rename_start_vote_user_star_vote",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Tarot', '0006_user_istarot'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='user',\n            old_name='start_vote',\n            new_name='star_vote',\n        ),",
        "detail": "Tarot.migrations.0007_rename_start_vote_user_star_vote",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Tarot.migrations.0008_alter_user_avatar_alter_user_cover_page",
        "description": "Tarot.migrations.0008_alter_user_avatar_alter_user_cover_page",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Tarot', '0007_rename_start_vote_user_star_vote'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='avatar',\n            field=models.ImageField(blank=True, default='avatars/default_avatar.jpg', null=True, upload_to='avatars/'),\n        ),",
        "detail": "Tarot.migrations.0008_alter_user_avatar_alter_user_cover_page",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Tarot.migrations.0009_alter_user_avatar_alter_user_cover_page",
        "description": "Tarot.migrations.0009_alter_user_avatar_alter_user_cover_page",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Tarot', '0008_alter_user_avatar_alter_user_cover_page'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='avatar',\n            field=models.ImageField(blank=True, default='static/img/avatars/default_avatar.jpg', null=True, upload_to='static/avatars/'),\n        ),",
        "detail": "Tarot.migrations.0009_alter_user_avatar_alter_user_cover_page",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Tarot.migrations.0010_alter_user_star_vote",
        "description": "Tarot.migrations.0010_alter_user_star_vote",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Tarot', '0009_alter_user_avatar_alter_user_cover_page'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='star_vote',\n            field=models.IntegerField(default=0, null=True),\n        ),",
        "detail": "Tarot.migrations.0010_alter_user_star_vote",
        "documentation": {}
    },
    {
        "label": "get_star_range",
        "kind": 2,
        "importPath": "Tarot.templatetags.custom_tags",
        "description": "Tarot.templatetags.custom_tags",
        "peekOfCode": "def get_star_range(value):\n    try:\n        num_votes = int(value)\n        return range(num_votes)\n    except ValueError:\n        return []",
        "detail": "Tarot.templatetags.custom_tags",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "Tarot.templatetags.custom_tags",
        "description": "Tarot.templatetags.custom_tags",
        "peekOfCode": "register = template.Library()\n@register.filter\ndef get_star_range(value):\n    try:\n        num_votes = int(value)\n        return range(num_votes)\n    except ValueError:\n        return []",
        "detail": "Tarot.templatetags.custom_tags",
        "documentation": {}
    },
    {
        "label": "TarotConfig",
        "kind": 6,
        "importPath": "Tarot.apps",
        "description": "Tarot.apps",
        "peekOfCode": "class TarotConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'Tarot'",
        "detail": "Tarot.apps",
        "documentation": {}
    },
    {
        "label": "RegisterForm",
        "kind": 6,
        "importPath": "Tarot.forms",
        "description": "Tarot.forms",
        "peekOfCode": "class RegisterForm(UserCreationForm):\n    last_name = forms.CharField(\n        label='Họ và tên',\n        widget=forms.TextInput(attrs={'class': 'form-control','required': 'required',}),\n    )\n    birth_date = forms.DateField(\n        label='Ngày / Tháng / Năm Sinh',\n        widget=forms.DateInput(attrs={'type': 'date','class': 'form-control','required': 'required'})\n    )\n    email = forms.EmailField(",
        "detail": "Tarot.forms",
        "documentation": {}
    },
    {
        "label": "UpgradeUserForm",
        "kind": 6,
        "importPath": "Tarot.forms",
        "description": "Tarot.forms",
        "peekOfCode": "class UpgradeUserForm(UserCreationForm):\n    introduction = forms.CharField(\n        label='Giới thiệu',\n        widget=forms.Textarea(attrs={'class': 'Upgradeform-control','required': 'required',}),\n    )\n    status = forms.CharField(\n        label='Trạng thái',\n        widget=forms.TextInput(attrs={'class': 'Upgradeform-control','required': 'required',}),\n    )   \n    cover_page = forms.ImageField(",
        "detail": "Tarot.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "Tarot.models",
        "description": "Tarot.models",
        "peekOfCode": "class User(AbstractUser):\n    avatar = models.ImageField(upload_to='static/avatars/', null=True, blank=True , default='static/img/avatars/default_avatar.jpg')\n    cover_page = models.ImageField(upload_to='static/cover_pages/', null=True, blank=True)\n    tarot_role = models.CharField(max_length=50, default= \"Tarot Reading and AStrology\")\n    introduction = models.TextField(null=True)\n    status = models.CharField(max_length=255, null=True)\n    star_vote = models.IntegerField(null=True,default= 0)\n    birth_date = models.DateField(null=True)\n    email = models.EmailField(null=True)\n    phone_number = models.CharField(max_length=10,null=True)",
        "detail": "Tarot.models",
        "documentation": {}
    },
    {
        "label": "dich_v",
        "kind": 6,
        "importPath": "Tarot.models",
        "description": "Tarot.models",
        "peekOfCode": "class dich_vu (models.Model ):\n    id = models.OneToOneField(User, on_delete=models.CASCADE, primary_key=True)\n    name = models.CharField(max_length=255,  )\n    price = models.IntegerField()\n    content = models.TextField()\n    date  = models.DateField()",
        "detail": "Tarot.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "Tarot.urls",
        "description": "Tarot.urls",
        "peekOfCode": "app_name = \"Tarot\"\nurlpatterns = [\n    path('', views.ViewUser.as_view(), name='HomePage'),\n    path('login/', views.LoginPageView.as_view(), name='login'),\n    path('register/', views.RegisterView.as_view(), name='register'),\n    path('logout/', views.LogoutView, name='logout'),\n    path('testpage/',  views.TestPageView.as_view(), name='HomePagetesst'),\n    path(\"profile/user/<int:user_id>/\", views.profileuser.as_view(), name=\"profile\"),\n    path(\"questions/user/<int:user_id>/\", views.question.as_view(), name=\"questions\"),\n    path(\"chatbot/\", chatbot, name=\"chatbot\"),",
        "detail": "Tarot.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "Tarot.urls",
        "description": "Tarot.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.ViewUser.as_view(), name='HomePage'),\n    path('login/', views.LoginPageView.as_view(), name='login'),\n    path('register/', views.RegisterView.as_view(), name='register'),\n    path('logout/', views.LogoutView, name='logout'),\n    path('testpage/',  views.TestPageView.as_view(), name='HomePagetesst'),\n    path(\"profile/user/<int:user_id>/\", views.profileuser.as_view(), name=\"profile\"),\n    path(\"questions/user/<int:user_id>/\", views.question.as_view(), name=\"questions\"),\n    path(\"chatbot/\", chatbot, name=\"chatbot\"),\n    path(\"package/user/<int:user_id>/\", views.package.as_view(), name=\"package\"),",
        "detail": "Tarot.urls",
        "documentation": {}
    },
    {
        "label": "profileuser",
        "kind": 6,
        "importPath": "Tarot.views",
        "description": "Tarot.views",
        "peekOfCode": "class profileuser(View):\n    def get(self, request, user_id):\n        user = User.objects.get(id=user_id)\n        return render(request, 'profile.html', {'User': user })\n    # def post(self,request, user_id):\n    #     if 'xem_theo_gio' in request.POST:\n    #         user = User.objects.get(user_id)\n    #         return render  (request, 'Hour.html', {'User': user })\n    #     elif 'xem_theo_so_luong_cau_hoi' in request.POST:\n    #         user = User.objects.get(id=user_id)",
        "detail": "Tarot.views",
        "documentation": {}
    },
    {
        "label": "question",
        "kind": 6,
        "importPath": "Tarot.views",
        "description": "Tarot.views",
        "peekOfCode": "class question(LoginRequiredMixin,View):\n    login_url = '/login/'\n    def get(self, request, user_id):\n        user = User.objects.get(id=user_id)\n        return render(request, 'Questions.html', {'User': user })\n# def package(request):\n#     return render(request, \"Package.html\")\nclass package(LoginRequiredMixin,View):\n    login_url = '/login/'\n    def get(self, request, user_id):",
        "detail": "Tarot.views",
        "documentation": {}
    },
    {
        "label": "package",
        "kind": 6,
        "importPath": "Tarot.views",
        "description": "Tarot.views",
        "peekOfCode": "class package(LoginRequiredMixin,View):\n    login_url = '/login/'\n    def get(self, request, user_id):\n        user = User.objects.get(id=user_id)\n        return render(request, 'Package.html', {'User': user })\n# def hour(request):\n#     return render(request, \"Hour.html\")\nclass hour(LoginRequiredMixin, View):\n    login_url = '/login/'\n    def get(self, request, user_id):",
        "detail": "Tarot.views",
        "documentation": {}
    },
    {
        "label": "hour",
        "kind": 6,
        "importPath": "Tarot.views",
        "description": "Tarot.views",
        "peekOfCode": "class hour(LoginRequiredMixin, View):\n    login_url = '/login/'\n    def get(self, request, user_id):\n        user = User.objects.get(id=user_id)\n        return render(request, 'Hour.html', {'User': user })\ndef chooseSlot(request):\n    return render(request, \"ChooseSlot.html\")\nclass checkout(LoginRequiredMixin,View ):\n    login_url = '/login/'\n    def get(self, request):",
        "detail": "Tarot.views",
        "documentation": {}
    },
    {
        "label": "checkout",
        "kind": 6,
        "importPath": "Tarot.views",
        "description": "Tarot.views",
        "peekOfCode": "class checkout(LoginRequiredMixin,View ):\n    login_url = '/login/'\n    def get(self, request):\n        return render(request, \"CheckOut.html\")\n# def calendar(request):\n#     return render(request, \"Calendar.html\")\nclass calendar(LoginRequiredMixin,View):\n    login_url = '/login/'\n    def get(self, request, user_id):\n        user = User.objects.get(id=user_id)",
        "detail": "Tarot.views",
        "documentation": {}
    },
    {
        "label": "calendar",
        "kind": 6,
        "importPath": "Tarot.views",
        "description": "Tarot.views",
        "peekOfCode": "class calendar(LoginRequiredMixin,View):\n    login_url = '/login/'\n    def get(self, request, user_id):\n        user = User.objects.get(id=user_id)\n        return render(request, 'Calendar.html', {'User': user })\n# def user_detail(request, user_id):\n#     user = get_object_or_404(User, id=user_id)\n#     # Đảm bảo rằng bạn truyền đúng tên trường hoặc thuộc tính để truy xuất thông tin của người dùng\n#     return render(request, 'user_detail.html', {'user': user})\nclass LoginPageView(View):",
        "detail": "Tarot.views",
        "documentation": {}
    },
    {
        "label": "LoginPageView",
        "kind": 6,
        "importPath": "Tarot.views",
        "description": "Tarot.views",
        "peekOfCode": "class LoginPageView(View):\n    def get(self, request):\n        return render(request, 'login_page.html')\n    def post(self, request):\n        user_name = request.POST.get('email')\n        password = request.POST.get('password')\n        print(user_name, password)\n        check_login = authenticate(username=user_name, password=password)\n        if check_login is None:\n            return render(request, 'login_page.html', {'error': 'Tên đăng nhập hoặc mật khẩu không đúng'})",
        "detail": "Tarot.views",
        "documentation": {}
    },
    {
        "label": "ViewUser",
        "kind": 6,
        "importPath": "Tarot.views",
        "description": "Tarot.views",
        "peekOfCode": "class ViewUser(View):\n    login_url = '/login/'\n    def get(self, request):\n        istarot_users = User.objects.filter(istarot=True)\n        random_users = random.sample(list(istarot_users), 1)\n        context = {'istarot_users': random_users}\n        return render(request, 'HomePage.html', context)\nclass RegisterView(View):\n    def get(self, request):\n        form = RegisterForm()",
        "detail": "Tarot.views",
        "documentation": {}
    },
    {
        "label": "RegisterView",
        "kind": 6,
        "importPath": "Tarot.views",
        "description": "Tarot.views",
        "peekOfCode": "class RegisterView(View):\n    def get(self, request):\n        form = RegisterForm()\n        return render(request, 'register_page.html', {'form': form})\n    def post(self, request):\n        form = RegisterForm(request.POST)\n        if form.is_valid():\n            email = form.cleaned_data.get('email')\n            if User.objects.filter(username=email):\n                form.add_error('email', 'Tên đăng nhập đã tồn tại')",
        "detail": "Tarot.views",
        "documentation": {}
    },
    {
        "label": "TestPageView",
        "kind": 6,
        "importPath": "Tarot.views",
        "description": "Tarot.views",
        "peekOfCode": "class TestPageView(View) :\n    def get(self, request):\n        return render(request, 'Post.html')\nclass PostView(View) :\n    def get(self, request):\n        return render(request, 'Post.html')    \nclass EventView(View) :\n    def get (self, request):\n        return render(request, 'Event.html')\nclass Account(View) :",
        "detail": "Tarot.views",
        "documentation": {}
    },
    {
        "label": "PostView",
        "kind": 6,
        "importPath": "Tarot.views",
        "description": "Tarot.views",
        "peekOfCode": "class PostView(View) :\n    def get(self, request):\n        return render(request, 'Post.html')    \nclass EventView(View) :\n    def get (self, request):\n        return render(request, 'Event.html')\nclass Account(View) :\n    def get(self, request):\n        return render(request, 'Account.html')\nclass GuideView(View) :",
        "detail": "Tarot.views",
        "documentation": {}
    },
    {
        "label": "EventView",
        "kind": 6,
        "importPath": "Tarot.views",
        "description": "Tarot.views",
        "peekOfCode": "class EventView(View) :\n    def get (self, request):\n        return render(request, 'Event.html')\nclass Account(View) :\n    def get(self, request):\n        return render(request, 'Account.html')\nclass GuideView(View) :\n    def get(self, request):\n        return render(request, 'Guide.html')        \nclass PaidSuccessfullyView(View):",
        "detail": "Tarot.views",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "Tarot.views",
        "description": "Tarot.views",
        "peekOfCode": "class Account(View) :\n    def get(self, request):\n        return render(request, 'Account.html')\nclass GuideView(View) :\n    def get(self, request):\n        return render(request, 'Guide.html')        \nclass PaidSuccessfullyView(View):\n    def get(self, request):\n        return render(request, 'PaidSuccessfully.html')\nclass MoreReaderView(View):",
        "detail": "Tarot.views",
        "documentation": {}
    },
    {
        "label": "GuideView",
        "kind": 6,
        "importPath": "Tarot.views",
        "description": "Tarot.views",
        "peekOfCode": "class GuideView(View) :\n    def get(self, request):\n        return render(request, 'Guide.html')        \nclass PaidSuccessfullyView(View):\n    def get(self, request):\n        return render(request, 'PaidSuccessfully.html')\nclass MoreReaderView(View):\n    def get(self, request):\n        istarot_users = User.objects.filter(istarot=True)\n        return render(request, 'more_reader.html', {'istarot_users': istarot_users })",
        "detail": "Tarot.views",
        "documentation": {}
    },
    {
        "label": "PaidSuccessfullyView",
        "kind": 6,
        "importPath": "Tarot.views",
        "description": "Tarot.views",
        "peekOfCode": "class PaidSuccessfullyView(View):\n    def get(self, request):\n        return render(request, 'PaidSuccessfully.html')\nclass MoreReaderView(View):\n    def get(self, request):\n        istarot_users = User.objects.filter(istarot=True)\n        return render(request, 'more_reader.html', {'istarot_users': istarot_users })\nclass UpdateUserView(LoginRequiredMixin, View):\n    login_url = '/login/'\n    def get(self, request):",
        "detail": "Tarot.views",
        "documentation": {}
    },
    {
        "label": "MoreReaderView",
        "kind": 6,
        "importPath": "Tarot.views",
        "description": "Tarot.views",
        "peekOfCode": "class MoreReaderView(View):\n    def get(self, request):\n        istarot_users = User.objects.filter(istarot=True)\n        return render(request, 'more_reader.html', {'istarot_users': istarot_users })\nclass UpdateUserView(LoginRequiredMixin, View):\n    login_url = '/login/'\n    def get(self, request):\n        form = UpgradeUserForm()\n        return render(request, 'upgrade_User.html', {'form': form})\n    def post(self, request):",
        "detail": "Tarot.views",
        "documentation": {}
    },
    {
        "label": "UpdateUserView",
        "kind": 6,
        "importPath": "Tarot.views",
        "description": "Tarot.views",
        "peekOfCode": "class UpdateUserView(LoginRequiredMixin, View):\n    login_url = '/login/'\n    def get(self, request):\n        form = UpgradeUserForm()\n        return render(request, 'upgrade_User.html', {'form': form})\n    def post(self, request):\n        form = UpgradeUserForm(request.POST, request.FILES)\n        if form.is_valid():\n            user = request.user\n            user.introduction = form.cleaned_data.get('introduction')",
        "detail": "Tarot.views",
        "documentation": {}
    },
    {
        "label": "chatbot",
        "kind": 2,
        "importPath": "Tarot.views",
        "description": "Tarot.views",
        "peekOfCode": "def chatbot(request):\n    return render(request, \"Chatbox.html\")\ndef listReader(request):\n    return render(request, \"ListReader.html\")\n# class profileUser(View):\n#     def get(request):\n#         return render(request, \"Profile.html\")\nclass profileuser(View):\n    def get(self, request, user_id):\n        user = User.objects.get(id=user_id)",
        "detail": "Tarot.views",
        "documentation": {}
    },
    {
        "label": "listReader",
        "kind": 2,
        "importPath": "Tarot.views",
        "description": "Tarot.views",
        "peekOfCode": "def listReader(request):\n    return render(request, \"ListReader.html\")\n# class profileUser(View):\n#     def get(request):\n#         return render(request, \"Profile.html\")\nclass profileuser(View):\n    def get(self, request, user_id):\n        user = User.objects.get(id=user_id)\n        return render(request, 'profile.html', {'User': user })\n    # def post(self,request, user_id):",
        "detail": "Tarot.views",
        "documentation": {}
    },
    {
        "label": "chooseSlot",
        "kind": 2,
        "importPath": "Tarot.views",
        "description": "Tarot.views",
        "peekOfCode": "def chooseSlot(request):\n    return render(request, \"ChooseSlot.html\")\nclass checkout(LoginRequiredMixin,View ):\n    login_url = '/login/'\n    def get(self, request):\n        return render(request, \"CheckOut.html\")\n# def calendar(request):\n#     return render(request, \"Calendar.html\")\nclass calendar(LoginRequiredMixin,View):\n    login_url = '/login/'",
        "detail": "Tarot.views",
        "documentation": {}
    },
    {
        "label": "xinloipagenaychuahoatdong",
        "kind": 2,
        "importPath": "Tarot.views",
        "description": "Tarot.views",
        "peekOfCode": "def xinloipagenaychuahoatdong(request):\n    return render(request, 'xinloi.html')\ndef LogoutView(request):\n    logout(request)\n    return HttpResponseRedirect('/login/')",
        "detail": "Tarot.views",
        "documentation": {}
    },
    {
        "label": "LogoutView",
        "kind": 2,
        "importPath": "Tarot.views",
        "description": "Tarot.views",
        "peekOfCode": "def LogoutView(request):\n    logout(request)\n    return HttpResponseRedirect('/login/')",
        "detail": "Tarot.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "Tarotalk.asgi",
        "description": "Tarotalk.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "Tarotalk.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "Tarotalk.settings",
        "description": "Tarotalk.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-(#oqgl+bt^+wv2y^trhy3-875l!18u67w=m7hz!h$qfsj*fh_4'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [",
        "detail": "Tarotalk.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "Tarotalk.settings",
        "description": "Tarotalk.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-(#oqgl+bt^+wv2y^trhy3-875l!18u67w=m7hz!h$qfsj*fh_4'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "Tarotalk.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "Tarotalk.settings",
        "description": "Tarotalk.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "Tarotalk.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "Tarotalk.settings",
        "description": "Tarotalk.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'Tarot',",
        "detail": "Tarotalk.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "Tarotalk.settings",
        "description": "Tarotalk.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'Tarot',\n]\nMIDDLEWARE = [",
        "detail": "Tarotalk.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "Tarotalk.settings",
        "description": "Tarotalk.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'Tarotalk.urls'",
        "detail": "Tarotalk.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "Tarotalk.settings",
        "description": "Tarotalk.settings",
        "peekOfCode": "ROOT_URLCONF = 'Tarotalk.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "Tarotalk.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "Tarotalk.settings",
        "description": "Tarotalk.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "Tarotalk.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "Tarotalk.settings",
        "description": "Tarotalk.settings",
        "peekOfCode": "WSGI_APPLICATION = 'Tarotalk.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "Tarotalk.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "Tarotalk.settings",
        "description": "Tarotalk.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "Tarotalk.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "Tarotalk.settings",
        "description": "Tarotalk.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "Tarotalk.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "Tarotalk.settings",
        "description": "Tarotalk.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'Asia/Ho_Chi_Minh'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n#STATIC_ROOT = BASE_DIR / 'static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field",
        "detail": "Tarotalk.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "Tarotalk.settings",
        "description": "Tarotalk.settings",
        "peekOfCode": "TIME_ZONE = 'Asia/Ho_Chi_Minh'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n#STATIC_ROOT = BASE_DIR / 'static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDATE_INPUT_FORMATS = ['%d-%m-%Y']",
        "detail": "Tarotalk.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "Tarotalk.settings",
        "description": "Tarotalk.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n#STATIC_ROOT = BASE_DIR / 'static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDATE_INPUT_FORMATS = ['%d-%m-%Y']\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Tarotalk.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "Tarotalk.settings",
        "description": "Tarotalk.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n#STATIC_ROOT = BASE_DIR / 'static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDATE_INPUT_FORMATS = ['%d-%m-%Y']\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'Tarot.User'",
        "detail": "Tarotalk.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "Tarotalk.settings",
        "description": "Tarotalk.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n#STATIC_ROOT = BASE_DIR / 'static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDATE_INPUT_FORMATS = ['%d-%m-%Y']\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'Tarot.User'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n    os.path.join(BASE_DIR, 'Tarot', 'static'),",
        "detail": "Tarotalk.settings",
        "documentation": {}
    },
    {
        "label": "#STATIC_ROOT",
        "kind": 5,
        "importPath": "Tarotalk.settings",
        "description": "Tarotalk.settings",
        "peekOfCode": "#STATIC_ROOT = BASE_DIR / 'static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDATE_INPUT_FORMATS = ['%d-%m-%Y']\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'Tarot.User'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n    os.path.join(BASE_DIR, 'Tarot', 'static'),\n]",
        "detail": "Tarotalk.settings",
        "documentation": {}
    },
    {
        "label": "DATE_INPUT_FORMATS",
        "kind": 5,
        "importPath": "Tarotalk.settings",
        "description": "Tarotalk.settings",
        "peekOfCode": "DATE_INPUT_FORMATS = ['%d-%m-%Y']\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'Tarot.User'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n    os.path.join(BASE_DIR, 'Tarot', 'static'),\n]\nSECURE_CROSS_ORIGIN_OPENER_POLICY = None",
        "detail": "Tarotalk.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "Tarotalk.settings",
        "description": "Tarotalk.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'Tarot.User'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n    os.path.join(BASE_DIR, 'Tarot', 'static'),\n]\nSECURE_CROSS_ORIGIN_OPENER_POLICY = None",
        "detail": "Tarotalk.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "Tarotalk.settings",
        "description": "Tarotalk.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'Tarot.User'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n    os.path.join(BASE_DIR, 'Tarot', 'static'),\n]\nSECURE_CROSS_ORIGIN_OPENER_POLICY = None",
        "detail": "Tarotalk.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "Tarotalk.settings",
        "description": "Tarotalk.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n    os.path.join(BASE_DIR, 'Tarot', 'static'),\n]\nSECURE_CROSS_ORIGIN_OPENER_POLICY = None",
        "detail": "Tarotalk.settings",
        "documentation": {}
    },
    {
        "label": "SECURE_CROSS_ORIGIN_OPENER_POLICY",
        "kind": 5,
        "importPath": "Tarotalk.settings",
        "description": "Tarotalk.settings",
        "peekOfCode": "SECURE_CROSS_ORIGIN_OPENER_POLICY = None",
        "detail": "Tarotalk.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "Tarotalk.urls",
        "description": "Tarotalk.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('Tarot.urls')),\n]",
        "detail": "Tarotalk.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "Tarotalk.wsgi",
        "description": "Tarotalk.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "Tarotalk.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Tarotalk.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]